/*
 * Copyright (c) 2017 eilslabs.
 *
 * Distributed under the MIT License (license terms are at https://www.github.com/eilslabs/Roddy/LICENSE.txt).
 */

// TODO Add travis config
// TODO Put git short hash into manifests
// TODO Use subproject { ... } for building external plugins configured on the command line. Then maybe remove explicit projects PluginBase and DefaultPlugin.


buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // The Shadow plugin to create a fat-jar of the Roddy application.
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"           // Apache 2.0
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.7.2'                                  // Apache 2.0
    id 'idea'
}

group = "com.github.eilslabs"

/**
 * Gets the version name from the current Git tag. If the current commit is not tagged,
 * this returned string will indicate that. Also if the repository is dirty.
 */
String getVersionName() {
    def dirtySuffix = grgit.status().isClean() ? '' : '-dirty'
    return grgit.describe() + dirtySuffix
}

/**
 * -PignoreFailedTests                  Continue despite failed tests.
 * -PreleaseLevel={major,minor,patch}   When releasing, increase the major.minor.patch number. The build number is always increased.
 * -PallowDirtyRepo=true                Continue release despite dirty repo.
 * -Pchecked=false                      Turn off -F Xlint:unchecked
 */

ext.allowDirtyRepo = (project.hasProperty("allowDirty") && project.allowDirty == "true")

allprojects {

    apply plugin: "java"

    // Java settings
    ext.langLevel = "1.8"

    sourceCompatibility = langLevel
    targetCompatibility = langLevel
    compileJava.options.fork = true
    compileJava.options.forkOptions.executable = "${rootProject.projectDir}/dist/runtimeDevel/jdk"

    tasks.withType(Jar) {
        manifest {
            attributes("Implementation-Vendor": "German Cancer Research Center (DKFZ)")
        }
    }

    if (project != rootProject) {
        ext.buildVersion = getVersionName()
    }

    // Set -Pchecked on the command line to change this compiler parameter.
    if (!project.hasProperty("checked") || !project.checked) {
        compileJava.options.compilerArgs = ["-F Xlint:unchecked"]
    }

    // The following keeps the Gradle build files separate from the ones build by IntelliJ (usually in build/).
    buildDir = "${projectDir}/gradleBuild"

    test {
        workingDir = System.getProperty("user.dir")
        ignoreFailures = project.hasProperty("ignoreFailedTests")

        testLogging {
            debug {
                events "started", "skipped", "failed"
                exceptionFormat "full"
            }
            events "failed"
            exceptionFormat "full"
            setShowStandardStreams true
        }
    }

}

// Sub-projects. Paths are configured in settings.gradle.
project("RoddyCore") {

    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'java'
    apply plugin: 'groovy'

    mainClassName = "de.dkfz.roddy.Roddy"

    repositories {
        mavenCentral()                                        // Most dependencies
        jcenter()                                             // Shadow plugin to produce the fat jar
        maven { url 'https://jitpack.io' }                    // Github: RoddyToolLib, BatchEuphoria
        maven { url "http://central.maven.org/maven2/" }      // Some of the remaining dependencies
    }

    dependencies {
        compile 'com.github.eilslabs:RoddyToolLib:0.0.2'            // MIT
        compile 'com.github.eilslabs:BatchEuphoria:'                // MIT
        compile 'org.codehaus.groovy:groovy-all:2.4.9'              // Apache 2.0

        compile 'org.bouncycastle:bcpg-jdk15on:1.51'                // MIT
        compile 'org.bouncycastle:bcpkix-jdk15on:1.51'              // MIT
        compile 'org.bouncycastle:bcprov-ext-jdk15on:1.51'          // MIT
        compile 'org.bouncycastle:bcprov-jdk15on:1.51'              // MIT

        compile 'com.google.guava:guava:23.0'                       // Apache 2.0

        compile 'org.apache.commons:commons-csv:1.2'                // Apache 2.0
        compile 'commons-cli:commons-cli:1.2'                       // Apache 2.0
        compile 'commons-codec:commons-codec:1.8'                   // Apache 2.0
        compile 'commons-io:commons-io:2.4'                         // Apache 2.0
        compile 'commons-logging:commons-logging:1.1.1'             // Apache 2.0

        compile 'com.jcraft:jzlib:1.1.3'                            // BSD
        compile 'com.github.markusbernhardt:proxy-vole:1.0.4'       // Apache 2.0
        compile 'org.reflections:reflections:0.9.9-RC1'

        compile 'org.slf4j:slf4j-api:1.7.22'                        // MIT
        compile 'org.slf4j:slf4j-jcl:1.7.22'                        // MIT
        compile 'org.slf4j:slf4j-nop:1.7.22'                        // MIT
        compile 'org.slf4j:jcl-over-slf4j:1.7.22'                   // MIT

        compile 'com.hierynomus:sshj:0.20.0'                        // Apache 2.0
        compile 'net.vrallev.ecc:ecc-25519-java:1.0.1'              // Apache 2.0; elliptic curve cryptography (ECC) with Curve25519
        compile 'net.i2p.crypto:eddsa:0.1.0'                        // CC0 1.0 Universal; Ed25519

        compile 'com.thoughtworks.xstream:xstream:1.4.5'            // BSD

        compile files("${rootProject.projectDir}/dist/runtimeDevel/jdk/jre/lib/ext/jfxrt.jar")

        // Testing libraries (do not end up in the fat-jar)
        testCompile 'junit:junit:4.12'                              // EPL 1.0
        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'  // Apache 2.0
        testCompile 'org.hamcrest:hamcrest-all:1.3'                 // BSD 2-clause
    }

    project.ext.developmentDir = new File(rootProject.projectDir, "dist/bin/current")
    convention.add("releaseDir", new File(project.ext.developmentDir, "../" + getVersionName()).absoluteFile)

    sourceSets {
        main {
            groovy {
                srcDirs = ["${projectDir}/src"]
            }
        }
        test {
            groovy {
                srcDirs = ["${projectDir}/test"]
            }
        }
    }

    def projectManifest = manifest {
        attributes("Main-Class": mainClassName, "Implementation-Title": name)
    }

    def baseSpec = copySpec {
        // Add GUI files.
        from(fileTree('src').include('**/*.fxml'))
        from(fileTree('src').include('**/*.css'))
        into("imgs") {
            from(fileTree(dir: 'src/imgs'))
        }
    }

    shadowJar {
        baseName = "Roddy"
        // version = getVersionName()  // toggle to get a versioned jar name
        setDestinationDir(project.ext.developmentDir)
        manifest {
            attributes 'Main-Class': mainClassName
            attributes 'Implementation-Version': getVersionName()
        }
        with(baseSpec)
    }

}

// IntelliJ IDEA
idea {
    project {
        setJdkName(langLevel)
        languageLevel = langLevel
    }
}

// Gradle Wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}



// end of build.gradle
