import java.nio.file.Paths

/*
 * Copyright (c) 2017 German Cancer Research Center (DKFZ).
 *
 * Distributed under the MIT License (license terms are at https://www.github.com/theroddywms/Roddy/LICENSE.txt).
 */

// TODO Put git short hash into manifests
// TODO How to compile Roddy plugins? Can this be done with gradle as well?

import org.cyclonedx.gradle.CycloneDxTask

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'kr.motd.gradle', name: 'sphinx-gradle-plugin', version: '2.2.0'
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.7.2'
    id 'org.cyclonedx.bom' version '1.8.2'
    id 'idea'
}

group = "com.github.dkfz"

/**
 * -PignoreFailedTests                  Continue despite failed tests.
 * -PallowDirtyRepo=true                Continue release despite dirty repo.
 * -Pchecked=false                      Turn off -F Xlint:unchecked
 */

ext.allowDirtyRepo = (project.hasProperty("allowDirty") && project.allowDirty == "true")

// apply plugin: "java"
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'groovy'
apply plugin: 'kr.motd.sphinx'  // Apache 2.0
apply plugin: 'codenarc'

// Java settings
ext.langLevel = "1.8"
sourceCompatibility = langLevel
targetCompatibility = langLevel
compileJava.options.fork = true

// Set -Pchecked={true,false} on the command line to change this compiler parameter. Default: unchecked
if (project.hasProperty("checked") && !project.checked) {
    compileJava.options.compilerArgs = ["-Xlint:unchecked"]
    compileGroovy.options.compilerArgs = ["-Xlint:unchecked"]
}

// The following keeps the Gradle build files separate from the ones build by IntelliJ (usually in build/).
buildDir = "${projectDir}/gradleBuild"

/*
 * Gets the version name from the current Git tag. If the current commit is not tagged,
 * this returned string will indicate that. Also if the repository is dirty
 */
def getVersionName() {
    def dirtySuffix = grgit.status().isClean() ? '' : '-dirty'
    return grgit.describe() + dirtySuffix
}

rootProject.version = getVersionName()

test {
    workingDir = System.getProperty("user.dir")
    ignoreFailures = project.hasProperty("ignoreFailedTests")

    testLogging {
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }
        events "failed"
        exceptionFormat "full"
        setShowStandardStreams true
    }
}

repositories {
    mavenCentral()                                        // Most dependencies
    maven { url 'https://jitpack.io' }                    // Github: RoddyToolLib, BatchEuphoria
    maven { url "https://repo1.maven.org/maven2/" }       // Some of the remaining dependencies
}

// TODO For testing only. Needs to be changed as soon as RoddyToolLib is released.
ext.roddyToolLibVersion = "2.2.2"

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    resolutionStrategy.cacheDynamicVersionsFor(0, 'seconds')
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == "RoddyToolLib") {
            details.useVersion roddyToolLibVersion
            details.because "BatchEuphoria not affected by RoddyToolLib ${roddyToolLibVersion} API changes."
        }
    }
}

dependencies {
    compile "com.github.theroddywms:RoddyToolLib:${roddyToolLibVersion}"         // MIT
    // compile 'com.github.theroddywms:RoddyToolLib:master-SNAPSHOT'    // MIT
    compile 'com.github.theroddywms:BatchEuphoria:0.0.7-1'        // MIT
    // compile 'com.github.theroddywms:BatchEuphoria:master-SNAPSHOT'   // MIT
    compile 'org.codehaus.groovy:groovy-all:2.4.9'              // Apache 2.0

    compile 'org.bouncycastle:bcpg-jdk15on:1.51'                // MIT
    compile 'org.bouncycastle:bcpkix-jdk15on:1.51'              // MIT
    compile 'org.bouncycastle:bcprov-ext-jdk15on:1.51'          // MIT
    compile 'org.bouncycastle:bcprov-jdk15on:1.51'              // MIT

    compile 'com.google.guava:guava:23.0'                       // Apache 2.0

    compile 'org.apache.commons:commons-csv:1.2'                // Apache 2.0
    compile 'commons-cli:commons-cli:1.2'                       // Apache 2.0
    compile 'commons-codec:commons-codec:1.8'                   // Apache 2.0
    compile 'commons-io:commons-io:2.4'                         // Apache 2.0
    compile 'commons-logging:commons-logging:1.1.1'             // Apache 2.0

    compile 'com.jcraft:jzlib:1.1.3'                            // BSD
    compile 'com.github.markusbernhardt:proxy-vole:1.0.4'       // Apache 2.0
    compile 'org.reflections:reflections:0.9.9-RC1'

    compile 'org.slf4j:slf4j-api:1.7.22'                        // MIT
    compile 'org.slf4j:slf4j-nop:1.7.22'                        // MIT

    compile 'com.hierynomus:sshj:0.23.0'                        // Apache 2.0
    compile 'net.vrallev.ecc:ecc-25519-java:1.0.1'              // Apache 2.0; elliptic curve cryptography (ECC) with Curve25519
    compile 'net.i2p.crypto:eddsa:0.1.0'                        // CC0 1.0 Universal; Ed25519

    compile 'com.jcraft:jsch.agentproxy.jsch:0.0.9'               // BSD-style, http://www.jcraft.com/jsch-agent-proxy/LICENSE.txt
    compile 'com.jcraft:jsch.agentproxy.pageant:0.0.9'            // BSD-style, http://www.jcraft.com/jsch-agent-proxy/LICENSE.txt
    compile 'com.jcraft:jsch.agentproxy.sshj:0.0.9'               // BSD-style, http://www.jcraft.com/jsch-agent-proxy/LICENSE.txt
    compile 'com.jcraft:jsch.agentproxy.usocket-nc:0.0.9'         // BSD-style, http://www.jcraft.com/jsch-agent-proxy/LICENSE.txt
    compile 'com.jcraft:jsch.agentproxy.usocket-jna:0.0.9'        // BSD-style, http://www.jcraft.com/jsch-agent-proxy/LICENSE.txt
    compile 'com.jcraft:jsch.agentproxy.connector-factory:0.0.9'  // BSD-style, http://www.jcraft.com/jsch-agent-proxy/LICENSE.txt
    compile 'com.jcraft:jsch.agentproxy.sshagent:0.0.9'           // BSD-style, http://www.jcraft.com/jsch-agent-proxy/LICENSE.txt

    compile 'com.thoughtworks.xstream:xstream:1.4.5'                          // BSD
    compile 'com.github.petitparser.java-petitparser:petitparser-core:2.2.0'  // MIT

    // Testing libraries
    testCompile 'junit:junit:4.12'                              // EPL 1.0
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'  // Apache 2.0
}

project.ext.developmentDistributionDir = new File(rootProject.projectDir, "dist/bin/develop")
convention.add("releaseDir", new File(project.ext.developmentDistributionDir, "../" + rootProject.version).absoluteFile)

sourceSets {
    main {
        groovy {
            srcDirs = ["${projectDir}/RoddyCore/src"]
        }
    }
    test {
        groovy {
            srcDirs = ["${projectDir}/RoddyCore/test/src"]
        }
        resources {
            srcDirs = ["${projectDir}/RoddyCore/test/resources"]
        }
    }
}

mainClassName = "de.dkfz.roddy.Roddy"

project.ext.librariesDirectory = new File(project.ext.developmentDistributionDir, "lib")

task cleanRuntimeLibs(type: Delete) {
    delete fileTree(dir: librariesDirectory, exclude: ".keep")
}

clean.dependsOn(cleanRuntimeLibs)


task copyRuntimeLibs(type: Copy) {
    into librariesDirectory
    from configurations.runtime
}

jar {
    baseName = "Roddy"
    classifier = null
    version = null
    setDestinationDir(project.ext.developmentDistributionDir)
    manifest {
        attributes("Implementation-Vendor": "German Cancer Research Center (DKFZ)")
        attributes 'Main-Class': mainClassName
        attributes("Implementation-Title": baseName)
        attributes 'Implementation-Version': rootProject.version
    }
    dependsOn cleanRuntimeLibs, copyRuntimeLibs
}

/** Produce 2 distribution packages:
 *
 *  * Roddy-*.zip with everything that belongs into the dist/bin/develop directory & some other smaller files.
 *  * RoddyEnv-*.zip with the runtime environment, starter script, etc.
 */
distributions {

    roddy {
        baseName = "Roddy"
        contents {
            into(rootProject.version)
            from(project.ext.developmentDistributionDir) {
                include("**")
            }
            from("./") {
                include("LICENSE")
                include("CONTRIBUTING.md")
                include("CONTRIBUTORS.md")
                include("3RDPARTY_LICENSES")
                include("CHANGELIST.md")
            }
            from ("RoddyCore/") {
                include("buildversion.txt")
            }
        }
    }

    roddyEnvironment {
        baseName = "RoddyEnv"
        contents {
            from("./") {
                include("roddy.sh")
                include("README.md")
                include("LICENSE")
                include("CONTRIBUTING.md")
                include("CONTRIBUTORS.md")
                include("3RDPARTY_LICENSES")
                include("CHANGELIST.md")
                include("dist/bin")
                include("dist/runtime")
                include("dist/plugins")
            }
        }
    }

}

roddyDistTar.dependsOn(jar)
roddyDistZip.dependsOn(jar)

// IntelliJ IDEA
idea {
    project {
        setJdkName(langLevel)
        languageLevel = langLevel
    }
}

sphinx {
    sourceDirectory = "${project.projectDir}/docs/"
    outputDirectory = "${project.buildDir}/site/"
    warningsAsErrors = true
}

codenarc {
    toolVersion = "1.2.1"
    ignoreFailures = true
}

codenarcMain {
    configFile = rootProject.file("config/codenarc/codenarc.groovy")
}

codenarcTest {
    configFile = rootProject.file("config/codenarc/codenarc.groovy")
}

task listConfigurations {
    group = "reporting"
    description = "List all configurations, as needed for discerning development and production configurations by the SBOM tasks."
    doLast {
        configurations.each { Configuration c ->
            println c.name
        }
    }
}

task allBoms() {
    // a grouping task to execute the CycloneDxTask for each configuration
    group = "reporting"
}

rootProject.configurations.each { configuration ->
    String name = configuration.name
    task "${name}Bom"(type: CycloneDxTask) {
        group = "reporting"
        description = "Creates a CycloneDX SBOM for the configuration ${name}."

        destination = file("${project.buildDir}/reports/cyclonedx")
        outputName = name
        includeConfigs = [name]
        schemaVersion = "1.5"
        outputFormat="json"
        includeLicenseText = false
        projectType = "application"
    }
    allBoms.dependsOn tasks.getByName("${name}Bom")
}


// end of build.gradle
